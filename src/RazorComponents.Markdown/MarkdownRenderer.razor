@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IMarkdownComponentService Service

<div @ref="markdownContent" class="@Class" style="@Style">
    @((MarkupString)Html)
</div>

@code {
    [Parameter]
    public string Value { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    private string Html = "";

    private ElementReference markdownContent;

    private string BaseUrl { get; set; }

    protected override void OnInitialized()
    {
        BaseUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var ind = BaseUrl.IndexOf('#');
        if (ind >= 0)
            BaseUrl = BaseUrl.Remove(ind);
    }

    protected override void OnParametersSet()
    {
        Html = Service.Parse(Value);
        base.OnParametersSet();
    }

    public void Rerender()
    {
        Html = Service.Parse(Value);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Service.EnableCodeHighlight)
        {
            await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.highlight", markdownContent);
        }
        if (Service.EnableMathematics)
        {
            await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.math", markdownContent);
        }
        if (Service.EnableDiagrams)
        {
            await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.diagram", markdownContent);
        }
        await JSRuntime.InvokeVoidAsync("StardustDL_RazorComponents_Markdown.fixAnchor", markdownContent, BaseUrl);
    }
}
